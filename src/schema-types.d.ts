/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import { PokemonAttack } from './pokemon/models/PokemonAttack';
import { Pokemon } from './pokemon/models/Pokemon';
import { core, connectionPluginCore } from 'nexus';

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>,
    ): void;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ToggleFavoriteInput: {
    // input type
    pokemonId: string; // ID!
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  Mutation: {};
  PageInfo: {
    // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  };
  PhysicalQuantity: {
    // root type
    maximum?: string | null; // String
    minimum?: string | null; // String
  };
  Pokemon: Pokemon;
  PokemonAttack: PokemonAttack;
  PokemonEdge: {
    // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Pokemon'] | null; // Pokemon
  };
  Query: {};
  QueryPokemons_Connection: {
    // root type
    edges?: Array<NexusGenRootTypes['PokemonEdge'] | null> | null; // [PokemonEdge]
    nodes?: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  ToggleFavoritePayload: {
    // root type
    pokemon: NexusGenRootTypes['Pokemon']; // Pokemon!
  };
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['Pokemon'] | NexusGenRootTypes['PokemonAttack'];
}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  Mutation: {
    // field return type
    toggleFavorite: NexusGenRootTypes['ToggleFavoritePayload'] | null; // ToggleFavoritePayload
  };
  PageInfo: {
    // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  };
  PhysicalQuantity: {
    // field return type
    maximum: string | null; // String
    minimum: string | null; // String
  };
  Pokemon: {
    // field return type
    attacks: NexusGenRootTypes['PokemonAttack'][] | null; // [PokemonAttack!]
    classification: string | null; // String
    code: string; // String!
    fleeRate: number | null; // Float
    height: NexusGenRootTypes['PhysicalQuantity'] | null; // PhysicalQuantity
    id: string; // ID!
    isFavorite: boolean; // Boolean!
    maxCp: number | null; // Int
    maxHp: number | null; // Int
    name: string; // String!
    resistantTo: string[] | null; // [String!]
    types: string[] | null; // [String!]
    weaknesses: string[] | null; // [String!]
    weight: NexusGenRootTypes['PhysicalQuantity'] | null; // PhysicalQuantity
  };
  PokemonAttack: {
    // field return type
    category: string; // String!
    damage: number; // Int!
    id: string; // ID!
    name: string; // String!
    pokemon: NexusGenRootTypes['Pokemon']; // Pokemon!
    type: string; // String!
  };
  PokemonEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Pokemon'] | null; // Pokemon
  };
  Query: {
    // field return type
    pokemon: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    pokemonTypes: string[]; // [String!]!
    pokemons: NexusGenRootTypes['QueryPokemons_Connection'] | null; // QueryPokemons_Connection
  };
  QueryPokemons_Connection: {
    // field return type
    edges: Array<NexusGenRootTypes['PokemonEdge'] | null> | null; // [PokemonEdge]
    nodes: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number | null; // Int
  };
  ToggleFavoritePayload: {
    // field return type
    pokemon: NexusGenRootTypes['Pokemon']; // Pokemon!
  };
  Node: {
    // field return type
    id: string; // ID!
  };
}

export interface NexusGenFieldTypeNames {
  Mutation: {
    // field return type name
    toggleFavorite: 'ToggleFavoritePayload';
  };
  PageInfo: {
    // field return type name
    endCursor: 'String';
    hasNextPage: 'Boolean';
    hasPreviousPage: 'Boolean';
    startCursor: 'String';
  };
  PhysicalQuantity: {
    // field return type name
    maximum: 'String';
    minimum: 'String';
  };
  Pokemon: {
    // field return type name
    attacks: 'PokemonAttack';
    classification: 'String';
    code: 'String';
    fleeRate: 'Float';
    height: 'PhysicalQuantity';
    id: 'ID';
    isFavorite: 'Boolean';
    maxCp: 'Int';
    maxHp: 'Int';
    name: 'String';
    resistantTo: 'String';
    types: 'String';
    weaknesses: 'String';
    weight: 'PhysicalQuantity';
  };
  PokemonAttack: {
    // field return type name
    category: 'String';
    damage: 'Int';
    id: 'ID';
    name: 'String';
    pokemon: 'Pokemon';
    type: 'String';
  };
  PokemonEdge: {
    // field return type name
    cursor: 'String';
    node: 'Pokemon';
  };
  Query: {
    // field return type name
    pokemon: 'Pokemon';
    pokemonTypes: 'String';
    pokemons: 'QueryPokemons_Connection';
  };
  QueryPokemons_Connection: {
    // field return type name
    edges: 'PokemonEdge';
    nodes: 'Pokemon';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  ToggleFavoritePayload: {
    // field return type name
    pokemon: 'Pokemon';
  };
  Node: {
    // field return type name
    id: 'ID';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    toggleFavorite: {
      // args
      input: NexusGenInputs['ToggleFavoriteInput']; // ToggleFavoriteInput!
    };
  };
  Query: {
    pokemon: {
      // args
      code?: string | null; // String
      id?: string | null; // ID
      name?: string | null; // String
    };
    pokemons: {
      // args
      after?: string | null; // String
      first: number; // Int!
      isFavorite?: boolean | null; // Boolean
      name?: string | null; // String
      type?: string | null; // String
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  Node: 'Pokemon' | 'PokemonAttack';
}

export interface NexusGenTypeInterfaces {
  Pokemon: 'Node';
  PokemonAttack: 'Node';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = 'Node';

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
